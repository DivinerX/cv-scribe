"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Clipboard, RefreshCw } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export function InterviewQuestions({ jobDescription }) {
  const [question, setQuestion] = useState("")
  const [answer, setAnswer] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const { toast } = useToast()

  const handleGenerateAnswer = () => {
    if (!question.trim()) {
      toast({
        title: "Error",
        description: "Please enter a question",
        variant: "destructive",
      })
      return
    }

    setIsGenerating(true)

    // Simulate API call delay
    setTimeout(() => {
      // Mock AI-generated answer
      const generatedAnswer =
        "This is a mock AI-generated answer to your interview question. In a real implementation, this would be generated by OpenAI based on the job description and the specific question you've asked. The answer would be tailored to highlight your relevant skills and experiences in a way that addresses the question effectively and positions you as an ideal candidate for the role."

      setAnswer(generatedAnswer)
      setIsGenerating(false)

      toast({
        title: "Success",
        description: "Answer generated successfully",
      })
    }, 1500)
  }

  const copyToClipboard = () => {
    if (!answer) return

    navigator.clipboard.writeText(answer)
    toast({
      title: "Copied",
      description: "Answer copied to clipboard",
    })
  }

  const regenerateAnswer = () => {
    if (!question.trim()) return

    setIsGenerating(true)

    // Simulate API call delay
    setTimeout(() => {
      // Mock regenerated answer
      const regeneratedAnswer =
        "This is a regenerated answer that would be different from the original. In a real implementation, this would call the OpenAI API again with a slightly different prompt or temperature setting to get a variation of the previous answer. The goal is to provide you with alternative phrasings and approaches to answering the same interview question."

      setAnswer(regeneratedAnswer)
      setIsGenerating(false)

      toast({
        title: "Success",
        description: "Answer regenerated successfully",
      })
    }, 1500)
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Interview Question</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="interview-question">Enter an interview question</Label>
            <div className="flex gap-2">
              <Input
                id="interview-question"
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                placeholder="How would you handle a disagreement with a team member?"
              />
              <Button onClick={handleGenerateAnswer} disabled={isGenerating}>
                {isGenerating ? "Generating..." : "Generate"}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {answer && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Answer</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="relative">
              <Textarea value={answer} readOnly className="min-h-[200px]" />
              <div className="absolute top-2 right-2 flex gap-1">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 rounded-full bg-white dark:bg-gray-800"
                  onClick={copyToClipboard}
                >
                  <Clipboard className="h-4 w-4" />
                  <span className="sr-only">Copy to clipboard</span>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 rounded-full bg-white dark:bg-gray-800"
                  onClick={regenerateAnswer}
                  disabled={isGenerating}
                >
                  <RefreshCw className="h-4 w-4" />
                  <span className="sr-only">Regenerate answer</span>
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
